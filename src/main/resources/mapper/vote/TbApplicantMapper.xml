<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="io.nuls.dapp.communitygovernance.mapper.TbApplicantMapper">
  <resultMap id="BaseResultMap" type="io.nuls.dapp.communitygovernance.model.TbApplicant">
    <id column="address" jdbcType="VARCHAR" property="address" />
    <result column="type" jdbcType="TINYINT" property="type" />
    <result column="director" jdbcType="TINYINT" property="director" />
    <result column="email" jdbcType="VARCHAR" property="email" />
    <result column="amount" jdbcType="DECIMAL" property="amount" />
    <result column="created_time" jdbcType="TIMESTAMP" property="createdTime" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="io.nuls.dapp.communitygovernance.model.TbApplicant">
    <result column="desc" jdbcType="LONGVARCHAR" property="desc" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    address, type, director, email, amount, created_time, update_time
  </sql>
  <sql id="Blob_Column_List">
    desc
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="io.nuls.dapp.communitygovernance.model.TbApplicantParam" resultMap="ResultMapWithBLOBs">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from tb_applicant
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" parameterType="io.nuls.dapp.communitygovernance.model.TbApplicantParam" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from tb_applicant
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.String" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from tb_applicant
    where address = #{address,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String">
    delete from tb_applicant
    where address = #{address,jdbcType=VARCHAR}
  </delete>
  <delete id="deleteByExample" parameterType="io.nuls.dapp.communitygovernance.model.TbApplicantParam">
    delete from tb_applicant
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="io.nuls.dapp.communitygovernance.model.TbApplicant">
    insert into tb_applicant (address, type, director, 
      email, amount, created_time, 
      update_time, desc)
    values (#{address,jdbcType=VARCHAR}, #{type,jdbcType=TINYINT}, #{director,jdbcType=TINYINT}, 
      #{email,jdbcType=VARCHAR}, #{amount,jdbcType=DECIMAL}, #{createdTime,jdbcType=TIMESTAMP}, 
      #{updateTime,jdbcType=TIMESTAMP}, #{desc,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="io.nuls.dapp.communitygovernance.model.TbApplicant">
    insert into tb_applicant
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="address != null">
        address,
      </if>
      <if test="type != null">
        type,
      </if>
      <if test="director != null">
        director,
      </if>
      <if test="email != null">
        email,
      </if>
      <if test="amount != null">
        amount,
      </if>
      <if test="createdTime != null">
        created_time,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
      <if test="desc != null">
        desc,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="address != null">
        #{address,jdbcType=VARCHAR},
      </if>
      <if test="type != null">
        #{type,jdbcType=TINYINT},
      </if>
      <if test="director != null">
        #{director,jdbcType=TINYINT},
      </if>
      <if test="email != null">
        #{email,jdbcType=VARCHAR},
      </if>
      <if test="amount != null">
        #{amount,jdbcType=DECIMAL},
      </if>
      <if test="createdTime != null">
        #{createdTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="desc != null">
        #{desc,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="io.nuls.dapp.communitygovernance.model.TbApplicantParam" resultType="java.lang.Long">
    select count(*) from tb_applicant
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update tb_applicant
    <set>
      <if test="record.address != null">
        address = #{record.address,jdbcType=VARCHAR},
      </if>
      <if test="record.type != null">
        type = #{record.type,jdbcType=TINYINT},
      </if>
      <if test="record.director != null">
        director = #{record.director,jdbcType=TINYINT},
      </if>
      <if test="record.email != null">
        email = #{record.email,jdbcType=VARCHAR},
      </if>
      <if test="record.amount != null">
        amount = #{record.amount,jdbcType=DECIMAL},
      </if>
      <if test="record.createdTime != null">
        created_time = #{record.createdTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updateTime != null">
        update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.desc != null">
        desc = #{record.desc,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map">
    update tb_applicant
    set address = #{record.address,jdbcType=VARCHAR},
      type = #{record.type,jdbcType=TINYINT},
      director = #{record.director,jdbcType=TINYINT},
      email = #{record.email,jdbcType=VARCHAR},
      amount = #{record.amount,jdbcType=DECIMAL},
      created_time = #{record.createdTime,jdbcType=TIMESTAMP},
      update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      desc = #{record.desc,jdbcType=LONGVARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update tb_applicant
    set address = #{record.address,jdbcType=VARCHAR},
      type = #{record.type,jdbcType=TINYINT},
      director = #{record.director,jdbcType=TINYINT},
      email = #{record.email,jdbcType=VARCHAR},
      amount = #{record.amount,jdbcType=DECIMAL},
      created_time = #{record.createdTime,jdbcType=TIMESTAMP},
      update_time = #{record.updateTime,jdbcType=TIMESTAMP}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="io.nuls.dapp.communitygovernance.model.TbApplicant">
    update tb_applicant
    <set>
      <if test="type != null">
        type = #{type,jdbcType=TINYINT},
      </if>
      <if test="director != null">
        director = #{director,jdbcType=TINYINT},
      </if>
      <if test="email != null">
        email = #{email,jdbcType=VARCHAR},
      </if>
      <if test="amount != null">
        amount = #{amount,jdbcType=DECIMAL},
      </if>
      <if test="createdTime != null">
        created_time = #{createdTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="desc != null">
        desc = #{desc,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where address = #{address,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="io.nuls.dapp.communitygovernance.model.TbApplicant">
    update tb_applicant
    set type = #{type,jdbcType=TINYINT},
      director = #{director,jdbcType=TINYINT},
      email = #{email,jdbcType=VARCHAR},
      amount = #{amount,jdbcType=DECIMAL},
      created_time = #{createdTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      desc = #{desc,jdbcType=LONGVARCHAR}
    where address = #{address,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="io.nuls.dapp.communitygovernance.model.TbApplicant">
    update tb_applicant
    set type = #{type,jdbcType=TINYINT},
      director = #{director,jdbcType=TINYINT},
      email = #{email,jdbcType=VARCHAR},
      amount = #{amount,jdbcType=DECIMAL},
      created_time = #{createdTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP}
    where address = #{address,jdbcType=VARCHAR}
  </update>
</mapper>